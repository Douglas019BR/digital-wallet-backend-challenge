name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - pipeline
  pull_request:
    branches:
      - main

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and Start services
        run: |
          make build
          make up -d

      - name: Wait for healthchecks (DB and Web)
        run: |
          echo "Aguardando containers ficarem saud√°veis..."
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q db))
            echo "DB status: $STATUS"
            [ "$STATUS" == "healthy" ] && break
            sleep 5
          done

          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q web))
            echo "Web status: $STATUS"
            [ "$STATUS" == "healthy" ] && break
            sleep 5
          done

      - name: Install Python dev dependencies
        run: |
          docker compose exec -T web pip install -r requirements-dev.txt

      - name: Run migrations
        run: |
          docker compose exec -T web alembic upgrade head

      - name: Create coverage directory
        run: |
          docker compose exec -T web mkdir -p /tmp/coverage && \
          docker compose exec -T web chmod -R 777 /tmp/coverage

      - name: Run tests with coverage
        run: |
          docker compose exec -T web pytest --cov=. --cov-report=xml
          docker compose exec -T web coverage xml -o /tmp/coverage/coverage.xml

      - name: Copy coverage report
        run: |
          docker cp $(docker compose ps -q web):/tmp/coverage/coverage.xml ./coverage.xml || \
          echo '<?xml version="1.0"?><coverage version="7.3.2" lines-valid="0" lines-covered="0" line-rate="0"></coverage>' > coverage.xml

      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          coverage-badge -i coverage.xml -o coverage.svg || echo "Falha ao gerar badge, gerando dummy..."
          [ -f coverage.svg ] || echo '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="20"><text x="0" y="15">Coverage: unknown</text></svg>' > coverage.svg

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg
