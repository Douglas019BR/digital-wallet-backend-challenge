name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - pipeline
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Setup Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker image
        run: make build

      - name: Start services
        run: make up

      - name: Wait for services to be ready
        run: |
          until docker compose exec -T db pg_isready -U postgres; do
            echo "Waiting for database..."
            sleep 5
          done

      - name: Install dependencies
        run: |
          docker compose exec -T web pip install -r requirements-dev.txt || docker compose exec -T web pip install -r requirements-dev.txt

      - name: Run migrations
        run: |
          docker compose exec -T web alembic upgrade head || docker compose exec -T web alembic upgrade head

      - name: Create coverage directory with proper permissions
        run: |
          docker compose exec -T web mkdir -p /tmp/coverage && \
          docker compose exec -T web chmod -R 777 /tmp/coverage

      - name: Run tests with coverage
        run: |
          docker compose exec -T -e COVERAGE_FILE=/tmp/coverage/.coverage web pytest --cov=app
          docker compose exec -T web coverage xml -o /tmp/coverage/coverage.xml

      - name: Debug - List coverage files
        run: |
          docker compose exec -T web ls -la
          echo "#################"
          echo "Checking coverage files in container..."
          docker compose exec -T web ls -la /tmp/coverage/ || echo "No coverage directory found"

      - name: Copy coverage report from container
        run: |
          docker cp $(docker compose ps -q web):/tmp/coverage/coverage.xml ./coverage.xml || \
          echo "No coverage data found, creating minimal file for badge generation" && echo '<?xml version="1.0" ?><coverage version="7.3.2" timestamp="1713479948" lines-valid="0" lines-covered="0" line-rate="0" branches-covered="0" branches-valid="0" branch-rate="0" complexity="0"></coverage>' > ./coverage.xml

      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          if [ -f "coverage.xml" ]; then
            coverage-badge -o coverage.svg -f
          else
            # Create a fallback badge if no coverage data
            echo '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="114" height="20" role="img" aria-label="coverage: unknown"><title>coverage: unknown</title><linearGradient id="s" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"/><stop offset="1" stop-opacity=".1"/></linearGradient><clipPath id="r"><rect width="114" height="20" rx="3" fill="#fff"/></clipPath><g clip-path="url(#r)"><rect width="61" height="20" fill="#555"/><rect x="61" width="53" height="20" fill="#9f9f9f"/><rect width="114" height="20" fill="url(#s)"/></g><g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110"><text aria-hidden="true" x="315" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="510">coverage</text><text x="315" y="140" transform="scale(.1)" fill="#fff" textLength="510">coverage</text><text aria-hidden="true" x="865" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="430">unknown</text><text x="865" y="140" transform="scale(.1)" fill="#fff" textLength="430">unknown</text></g></svg>' > coverage.svg
          fi

      - name: Upload coverage badge
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg
